import sqlite3
import os
from datetime import datetime
from database import create_database, get_db_connection


def initialize_database(db_path):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_database(db_path)

    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    add_initial_materials(db_path)
    add_sample_warehouse_items(db_path)
    add_sample_products(db_path)
    add_sample_stages(db_path)

    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def add_initial_materials(db_path):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""

    materials = [
        # –ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã
        ("–ë—Ä—É—Å 100x100", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 85.00, "–º"),
        ("–ë—Ä—É—Å 150x150", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 120.00, "–º"),
        ("–î–æ—Å–∫–∞ 25x150", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 45.00, "–º"),
        ("–î–æ—Å–∫–∞ 40x150", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 65.00, "–º"),
        ("–î–æ—Å–∫–∞ 50x200", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 85.00, "–º"),
        ("–†–µ–π–∫–∞ 20x40", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 15.00, "–º"),
        ("–†–µ–π–∫–∞ 25x50", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 18.00, "–º"),
        ("–ë—Ä—É—Å–æ–∫ 40x40", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 25.00, "–º"),
        ("–ë—Ä—É—Å–æ–∫ 50x50", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 35.00, "–º"),

        # –ú–µ—Ç–∏–∑—ã
        ("–®—É—Ä—É–ø 4x60", "–ú–µ—Ç–∏–∑", 2.50, "—à—Ç"),
        ("–®—É—Ä—É–ø 5x80", "–ú–µ—Ç–∏–∑", 3.20, "—à—Ç"),
        ("–®—É—Ä—É–ø 6x100", "–ú–µ—Ç–∏–∑", 4.50, "—à—Ç"),
        ("–ë–æ–ª—Ç –ú8x100", "–ú–µ—Ç–∏–∑", 25.00, "—à—Ç"),
        ("–ë–æ–ª—Ç –ú10x120", "–ú–µ—Ç–∏–∑", 35.00, "—à—Ç"),
        ("–ë–æ–ª—Ç –ú12x150", "–ú–µ—Ç–∏–∑", 45.00, "—à—Ç"),
        ("–ì–∞–π–∫–∞ –ú8", "–ú–µ—Ç–∏–∑", 3.00, "—à—Ç"),
        ("–ì–∞–π–∫–∞ –ú10", "–ú–µ—Ç–∏–∑", 4.50, "—à—Ç"),
        ("–ì–∞–π–∫–∞ –ú12", "–ú–µ—Ç–∏–∑", 6.00, "—à—Ç"),
        ("–®–∞–π–±–∞ –ú8", "–ú–µ—Ç–∏–∑", 1.50, "—à—Ç"),
        ("–®–∞–π–±–∞ –ú10", "–ú–µ—Ç–∏–∑", 2.00, "—à—Ç"),
        ("–®–∞–π–±–∞ –ú12", "–ú–µ—Ç–∏–∑", 2.50, "—à—Ç"),
        ("–ö–∞—Ä–∞–±–∏–Ω", "–ú–µ—Ç–∏–∑", 450.00, "—à—Ç"),
        ("–ó–∞–∂–∏–º —Ç—Ä–æ—Å–∞", "–ú–µ—Ç–∏–∑", 180.00, "—à—Ç"),
        ("–¢–∞–ª—Ä–µ–ø", "–ú–µ—Ç–∏–∑", 850.00, "—à—Ç"),
        ("–¢—Ä–æ—Å 8–º–º", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 65.00, "–º"),  # –¢—Ä–æ—Å —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏–Ω—ã
    ]

    try:
        with get_db_connection(db_path) as conn:
            cursor = conn.cursor()

            for name, material_type, price, unit in materials:
                try:
                    cursor.execute(
                        "INSERT OR IGNORE INTO materials (name, type, price, unit) VALUES (?, ?, ?, ?)",
                        (name, material_type, price, unit)
                    )
                except sqlite3.IntegrityError:
                    # –ú–∞—Ç–µ—Ä–∏–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    pass

            conn.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}")


def add_sample_warehouse_items(db_path):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥"""

    # –û—Å—Ç–∞—Ç–∫–∏: (material_name, length, quantity)
    warehouse_items = [
        # –ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã - –æ—Å—Ç–∞—Ç–∫–∏ –¥–æ—Å–æ–∫ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
        ("–ë—Ä—É—Å 100x100", 6.0, 15),
        ("–ë—Ä—É—Å 100x100", 4.5, 8),
        ("–ë—Ä—É—Å 100x100", 3.0, 12),
        ("–ë—Ä—É—Å 150x150", 6.0, 6),
        ("–ë—Ä—É—Å 150x150", 4.0, 4),
        ("–î–æ—Å–∫–∞ 25x150", 6.0, 25),
        ("–î–æ—Å–∫–∞ 25x150", 4.0, 18),
        ("–î–æ—Å–∫–∞ 25x150", 3.0, 12),
        ("–î–æ—Å–∫–∞ 40x150", 6.0, 20),
        ("–î–æ—Å–∫–∞ 40x150", 4.5, 10),
        ("–î–æ—Å–∫–∞ 50x200", 6.0, 8),
        ("–†–µ–π–∫–∞ 20x40", 3.0, 30),
        ("–†–µ–π–∫–∞ 25x50", 3.0, 25),
        ("–ë—Ä—É—Å–æ–∫ 40x40", 4.0, 20),
        ("–ë—Ä—É—Å–æ–∫ 50x50", 4.0, 15),
        ("–¢—Ä–æ—Å 8–º–º", 50.0, 2),  # –¢—Ä–æ—Å –≤ –±—É—Ö—Ç–∞—Ö

        # –ú–µ—Ç–∏–∑—ã - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫
        ("–®—É—Ä—É–ø 4x60", 0, 500),
        ("–®—É—Ä—É–ø 5x80", 0, 300),
        ("–®—É—Ä—É–ø 6x100", 0, 200),
        ("–ë–æ–ª—Ç –ú8x100", 0, 100),
        ("–ë–æ–ª—Ç –ú10x120", 0, 80),
        ("–ë–æ–ª—Ç –ú12x150", 0, 50),
        ("–ì–∞–π–∫–∞ –ú8", 0, 120),
        ("–ì–∞–π–∫–∞ –ú10", 0, 100),
        ("–ì–∞–π–∫–∞ –ú12", 0, 60),
        ("–®–∞–π–±–∞ –ú8", 0, 150),
        ("–®–∞–π–±–∞ –ú10", 0, 120),
        ("–®–∞–π–±–∞ –ú12", 0, 80),
        ("–ö–∞—Ä–∞–±–∏–Ω", 0, 25),
        ("–ó–∞–∂–∏–º —Ç—Ä–æ—Å–∞", 0, 40),
        ("–¢–∞–ª—Ä–µ–ø", 0, 15),
    ]

    try:
        with get_db_connection(db_path) as conn:
            cursor = conn.cursor()

            for material_name, length, quantity in warehouse_items:
                # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                cursor.execute("SELECT id FROM materials WHERE name = ?", (material_name,))
                result = cursor.fetchone()

                if result:
                    material_id = result[0]
                    cursor.execute(
                        "INSERT INTO warehouse (material_id, length, quantity) VALUES (?, ?, ?)",
                        (material_id, length, quantity)
                    )

            conn.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {len(warehouse_items)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥: {str(e)}")


def add_sample_products(db_path):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏"""

    products_data = [
        # (product_name, composition)
        ("–û—Å—Ç—Ä–æ–≤–æ–∫ –±–∞–∑–æ–≤—ã–π", [
            ("–ë—Ä—É—Å 100x100", 4, 2.5),  # 4 —à—Ç –ø–æ 2.5–º
            ("–î–æ—Å–∫–∞ 40x150", 8, 1.5),  # 8 —à—Ç –ø–æ 1.5–º
            ("–®—É—Ä—É–ø 5x80", 32, None),  # 32 —à—Ç—É–∫–∏
            ("–ë–æ–ª—Ç –ú10x120", 8, None),  # 8 —à—Ç—É–∫
            ("–ì–∞–π–∫–∞ –ú10", 8, None),  # 8 —à—Ç—É–∫
            ("–®–∞–π–±–∞ –ú10", 16, None),  # 16 —à—Ç—É–∫
        ]),

        ("–ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ—Å—Ç–æ–π", [
            ("–ë—Ä—É—Å 100x100", 2, 1.2),  # 2 —à—Ç –ø–æ 1.2–º
            ("–î–æ—Å–∫–∞ 25x150", 4, 0.8),  # 4 —à—Ç –ø–æ 0.8–º
            ("–®—É—Ä—É–ø 4x60", 16, None),  # 16 —à—Ç—É–∫
            ("–ë–æ–ª—Ç –ú8x100", 4, None),  # 4 —à—Ç—É–∫–∏
            ("–ì–∞–π–∫–∞ –ú8", 4, None),  # 4 —à—Ç—É–∫–∏
            ("–®–∞–π–±–∞ –ú8", 8, None),  # 8 —à—Ç—É–∫
        ]),

        ("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–≥–ª–æ–≤–∞—è", [
            ("–ë—Ä—É—Å 150x150", 2, 2.0),  # 2 —à—Ç –ø–æ 2.0–º
            ("–î–æ—Å–∫–∞ 50x200", 6, 1.2),  # 6 —à—Ç –ø–æ 1.2–º
            ("–ë—Ä—É—Å–æ–∫ 50x50", 4, 0.6),  # 4 —à—Ç –ø–æ 0.6–º
            ("–®—É—Ä—É–ø 6x100", 24, None),  # 24 —à—Ç—É–∫–∏
            ("–ë–æ–ª—Ç –ú12x150", 6, None),  # 6 —à—Ç—É–∫
            ("–ì–∞–π–∫–∞ –ú12", 6, None),  # 6 —à—Ç—É–∫
            ("–®–∞–π–±–∞ –ú12", 12, None),  # 12 —à—Ç—É–∫
        ]),
    ]

    try:
        with get_db_connection(db_path) as conn:
            cursor = conn.cursor()

            for product_name, composition in products_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏–µ
                cursor.execute(
                    "INSERT OR IGNORE INTO products (name, cost) VALUES (?, ?)",
                    (product_name, 0)
                )

                # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑–¥–µ–ª–∏—è
                cursor.execute("SELECT id FROM products WHERE name = ?", (product_name,))
                product_id = cursor.fetchone()[0]

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤
                for material_name, quantity, length in composition:
                    cursor.execute("SELECT id FROM materials WHERE name = ?", (material_name,))
                    material_result = cursor.fetchone()

                    if material_result:
                        material_id = material_result[0]
                        cursor.execute(
                            "INSERT INTO product_composition (product_id, material_id, quantity, length) VALUES (?, ?, ?, ?)",
                            (product_id, material_id, quantity, length)
                        )

            conn.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–¥–µ–ª–∏–π: {len(products_data)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–¥–µ–ª–∏–π: {str(e)}")


def add_sample_stages(db_path):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç"""

    stages_data = [
        # (stage_name, description, products_list, materials_list)
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–æ—Ä",
         "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–µ—Å—É—â–∏—Ö –æ–ø–æ—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
         [],  # –ò–∑–¥–µ–ª–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
         [  # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞–ø—Ä—è–º—É—é
             ("–ë—Ä—É—Å 150x150", "start", 2, 2.5),  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 2 —à—Ç –ø–æ 2.5–º
             ("–ë—Ä—É—Å 100x100", "meter", 1, 1.0),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 1 —à—Ç –ø–æ 1–º
             ("–ë–æ–ª—Ç –ú12x150", "start", 4, None),  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 4 —à—Ç
             ("–ë–æ–ª—Ç –ú10x120", "meter", 2, None),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 2 —à—Ç
             ("–ì–∞–π–∫–∞ –ú12", "start", 4, None),  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 4 —à—Ç
             ("–ì–∞–π–∫–∞ –ú10", "meter", 2, None),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 2 —à—Ç
             ("–®–∞–π–±–∞ –ú12", "start", 8, None),  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 8 —à—Ç
             ("–®–∞–π–±–∞ –ú10", "meter", 4, None),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 4 —à—Ç
         ]),

        ("–ù–∞—Ç—è–∂–µ–Ω–∏–µ —Ç—Ä–æ—Å–∞",
         "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ –Ω–µ—Å—É—â–∏—Ö —Ç—Ä–æ—Å–æ–≤ –º–µ–∂–¥—É –æ–ø–æ—Ä–∞–º–∏",
         [],
         [
             ("–ö–∞—Ä–∞–±–∏–Ω", "start", 2, None),  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 2 —à—Ç
             ("–ö–∞—Ä–∞–±–∏–Ω", "end", 2, None),  # –ö–æ–Ω–µ—á–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 2 —à—Ç
             ("–¢–∞–ª—Ä–µ–ø", "start", 1, None),  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–ø–µ–∂: 1 —à—Ç
             ("–¢—Ä–æ—Å 8–º–º", "meter", 1, 1.0),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 1–º —Ç—Ä–æ—Å–∞
             ("–ó–∞–∂–∏–º —Ç—Ä–æ—Å–∞", "meter", 2, None),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 2 –∑–∞–∂–∏–º–∞
         ]),

        ("–ù–∞—Å—Ç–∏–ª –ø–µ—Ä–µ—Ö–æ–¥–æ–≤",
         "–£–∫–ª–∞–¥–∫–∞ –¥–æ—Å–æ–∫ –Ω–∞—Å—Ç–∏–ª–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö",
         [
             ("–ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ—Å—Ç–æ–π", "meter", 1, "meter"),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 1 –ø–µ—Ä–µ—Ö–æ–¥
         ],
         [
             ("–î–æ—Å–∫–∞ 40x150", "meter", 3, 1.0),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 3 –¥–æ—Å–∫–∏ –ø–æ 1–º
             ("–®—É—Ä—É–ø 5x80", "meter", 12, None),  # –ù–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä: 12 —à—É—Ä—É–ø–æ–≤
         ]),
    ]

    try:
        with get_db_connection(db_path) as conn:
            cursor = conn.cursor()

            for stage_name, description, products_list, materials_list in stages_data:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø
                cursor.execute(
                    "INSERT OR IGNORE INTO stages (name, description, cost) VALUES (?, ?, ?)",
                    (stage_name, description, 0)
                )

                # –ü–æ–ª—É—á–∞–µ–º ID —ç—Ç–∞–ø–∞
                cursor.execute("SELECT id FROM stages WHERE name = ?", (stage_name,))
                stage_id = cursor.fetchone()[0]

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏—è –≤ —ç—Ç–∞–ø
                for product_name, part, quantity, unit in products_list:
                    cursor.execute("SELECT id FROM products WHERE name = ?", (product_name,))
                    product_result = cursor.fetchone()

                    if product_result:
                        product_id = product_result[0]
                        cursor.execute(
                            "INSERT INTO stage_products (stage_id, product_id, quantity, part) VALUES (?, ?, ?, ?)",
                            (stage_id, product_id, quantity, part)
                        )

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —ç—Ç–∞–ø
                for material_name, part, quantity, length in materials_list:
                    cursor.execute("SELECT id FROM materials WHERE name = ?", (material_name,))
                    material_result = cursor.fetchone()

                    if material_result:
                        material_id = material_result[0]
                        cursor.execute(
                            "INSERT INTO stage_materials (stage_id, material_id, quantity, length, part) VALUES (?, ?, ?, ?, ?)",
                            (stage_id, material_id, quantity, length, part)
                        )

            conn.commit()
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–∞–ø–æ–≤: {len(stages_data)}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤: {str(e)}")


def recalculate_all_costs(db_path):
    """–ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""

    try:
        print("üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏...")

        with get_db_connection(db_path) as conn:
            cursor = conn.cursor()

            # –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π
            cursor.execute("SELECT id FROM products")
            product_ids = [row[0] for row in cursor.fetchall()]

            for product_id in product_ids:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∏–∑–¥–µ–ª–∏—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                cursor.execute('''
                    SELECT m.price, pc.quantity, pc.length, m.type
                    FROM product_composition pc
                    JOIN materials m ON pc.material_id = m.id
                    WHERE pc.product_id = ?
                ''', (product_id,))

                total_cost = 0
                for price, quantity, length, material_type in cursor.fetchall():
                    if material_type == "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª" and length:
                        item_cost = price * quantity * length
                    else:
                        item_cost = price * quantity
                    total_cost += item_cost

                cursor.execute(
                    "UPDATE products SET cost = ? WHERE id = ?",
                    (total_cost, product_id)
                )

            # –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —ç—Ç–∞–ø–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –∑–∞ –º–µ—Ç—Ä)
            cursor.execute("SELECT id FROM stages")
            stage_ids = [row[0] for row in cursor.fetchall()]

            for stage_id in stage_ids:
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –º–µ—Ç—Ä
                cursor.execute('''
                    SELECT m.price, sm.quantity, sm.length, sm.part, m.type
                    FROM stage_materials sm
                    JOIN materials m ON sm.material_id = m.id
                    WHERE sm.stage_id = ?
                ''', (stage_id,))

                meter_cost = 0
                for price, quantity, length, part, material_type in cursor.fetchall():
                    if part == "meter":
                        if material_type == "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª" and length:
                            meter_cost += price * quantity * length
                        else:
                            meter_cost += price * quantity

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏–π –Ω–∞ –º–µ—Ç—Ä
                cursor.execute('''
                    SELECT p.cost, sp.quantity
                    FROM stage_products sp
                    JOIN products p ON sp.product_id = p.id
                    WHERE sp.stage_id = ? AND sp.part = 'meter'
                ''', (stage_id,))

                for product_cost, quantity in cursor.fetchall():
                    meter_cost += product_cost * quantity

                cursor.execute(
                    "UPDATE stages SET cost = ? WHERE id = ?",
                    (meter_cost, stage_id)
                )

            conn.commit()
            print("‚úÖ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {str(e)}")


def clear_all_data(db_path):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã (–¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)"""

    try:
        with get_db_connection(db_path) as conn:
            cursor = conn.cursor()

            # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            tables_to_clear = [
                'order_items',
                'orders',
                'stage_materials',
                'stage_products',
                'product_composition',
                'warehouse',
                'stages',
                'products',
                'materials'
            ]

            for table in tables_to_clear:
                cursor.execute(f"DELETE FROM {table}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
            for table in tables_to_clear:
                cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{table}'")

            conn.commit()
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


def reset_database(db_path):
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""

    print("üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists(db_path):
        os.remove(db_path)
        print("‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    initialize_database(db_path)
    recalculate_all_costs(db_path)

    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


if __name__ == "__main__":
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –≤ –ø–∞–ø–∫–µ data
    current_dir = os.path.dirname(os.path.abspath(__file__))
    db_path = os.path.join(current_dir, "..", "data", "database.db")
    db_path = os.path.abspath(db_path)

    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if os.path.exists(db_path):
        response = input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å? (y/N): ")
        if response.lower() == 'y':
            reset_database(db_path)
        else:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        initialize_database(db_path)
        recalculate_all_costs(db_path)

    print("–ì–æ—Ç–æ–≤–æ!")