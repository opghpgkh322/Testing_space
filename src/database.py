# database.py - –í–ï–†–°–ò–Ø –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ê–í–¢–û–ó–ê–ü–û–õ–ù–ï–ù–ò–Ø

import sqlite3
import os


def check_table_structure(cursor, table_name, expected_columns):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã"""
    cursor.execute(f"PRAGMA table_info({table_name})")
    existing_columns = {col[1] for col in cursor.fetchall()}

    for column, col_type in expected_columns.items():
        if column not in existing_columns:
            try:
                cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {column} {col_type}")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {column} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
            except sqlite3.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column}: {e}")


def create_database(db_path):
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç—Ç–∞–ø–æ–≤ –∏ –∏—Ö —á–∞—Å—Ç–µ–π"""
    data_dir = os.path.dirname(db_path)
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""CREATE TABLE IF NOT EXISTS materials (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        type TEXT NOT NULL CHECK(type IN ("–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", "–ú–µ—Ç–∏–∑")),
        price REAL NOT NULL,
        unit TEXT NOT NULL)""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS warehouse (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        material_id INTEGER NOT NULL,
        length REAL NOT NULL,
        quantity INTEGER NOT NULL DEFAULT 1,
        FOREIGN KEY (material_id) REFERENCES materials(id))""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        cost REAL NOT NULL DEFAULT 0.0)""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS product_composition (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        material_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        length REAL,
        FOREIGN KEY (product_id) REFERENCES products(id),
        FOREIGN KEY (material_id) REFERENCES materials(id))""")

    # –¢–∞–±–ª–∏—Ü—ã —ç—Ç–∞–ø–æ–≤
    cursor.execute("""CREATE TABLE IF NOT EXISTS stages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        cost REAL NOT NULL DEFAULT 0.0,
        description TEXT,
        category TEXT DEFAULT '–°—Ç–∞—Ç–∏–∫–∞' CHECK(category IN ('–°—Ç–∞—Ç–∏–∫–∞', '–î–∏–Ω–∞–º–∏–∫–∞', '–ó–∏–ø')))""")

    # –í —Å–æ—Å—Ç–∞–≤–µ —ç—Ç–∞–ø–∞ —É–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å (start/meter/end)
    cursor.execute("""CREATE TABLE IF NOT EXISTS stage_products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        stage_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        part TEXT NOT NULL DEFAULT 'meter' CHECK(part IN ('start','meter','end')),
        FOREIGN KEY (stage_id) REFERENCES stages(id),
        FOREIGN KEY (product_id) REFERENCES products(id))""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS stage_materials (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        stage_id INTEGER NOT NULL,
        material_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        length REAL,
        part TEXT NOT NULL DEFAULT 'meter' CHECK(part IN ('start','meter','end')),
        FOREIGN KEY (stage_id) REFERENCES stages(id),
        FOREIGN KEY (material_id) REFERENCES materials(id))""")

    cursor.execute("""CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_date TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
        total_cost REAL NOT NULL DEFAULT 0.0,
        instructions TEXT,
        pdf_filename TEXT)""")

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ order_items —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π, –µ—Å–ª–∏ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='order_items'")
    table_exists = cursor.fetchone()
    existing_data = []

    if table_exists:
        cursor.execute("PRAGMA table_info(order_items)")
        old_columns = [col[1] for col in cursor.fetchall()]
        cursor.execute("SELECT * FROM order_items")
        existing_data = cursor.fetchall()
        cursor.execute("DROP TABLE order_items")

    cursor.execute("""CREATE TABLE IF NOT EXISTS order_items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER NOT NULL,
        product_id INTEGER,
        stage_id INTEGER,
        quantity INTEGER NOT NULL,
        length_meters REAL,
        product_name TEXT NOT NULL DEFAULT '',
        cost REAL NOT NULL DEFAULT 0.0,
        item_type TEXT NOT NULL DEFAULT 'product' CHECK(item_type IN ('product', 'stage')),
        FOREIGN KEY (order_id) REFERENCES orders(id),
        FOREIGN KEY (product_id) REFERENCES products(id),
        FOREIGN KEY (stage_id) REFERENCES stages(id))""")

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ (–µ—Å–ª–∏ –±—ã–ª–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞)
    if existing_data:
        for row in existing_data:
            try:
                if len(row) >= 7:
                    cursor.execute("""INSERT INTO order_items
                                    (id, order_id, product_id, quantity, product_name, cost, item_type)
                                    VALUES (?, ?, ?, ?, ?, ?, ?)""",
                                   (row[0], row[1], row[2], row[3], row[6], row[7], 'product'))
            except Exception:
                pass

    conn.commit()

    # –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î
    try:
        check_table_structure(cursor, "orders", {"pdf_filename": "TEXT"})
        check_table_structure(cursor, "stages", {"category": "TEXT DEFAULT '–°—Ç–∞—Ç–∏–∫–∞'"})
        check_table_structure(cursor, "stage_products", {"part": "TEXT NOT NULL DEFAULT 'meter'"})
        check_table_structure(cursor, "stage_materials", {"part": "TEXT NOT NULL DEFAULT 'meter'"})
        check_table_structure(cursor, "order_items", {"length_meters": "REAL"})
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        conn.rollback()
    finally:
        conn.close()


def add_stage_category_column(db_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É category –≤ —Ç–∞–±–ª–∏—Ü—É stages –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    conn = sqlite3.connect(db_path)
    try:
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ category
        cursor.execute("PRAGMA table_info(stages)")
        columns = [col[1] for col in cursor.fetchall()]

        if 'category' not in columns:
            cursor.execute("ALTER TABLE stages ADD COLUMN category TEXT DEFAULT '–°—Ç–∞—Ç–∏–∫–∞'")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ category –≤ —Ç–∞–±–ª–∏—Ü—É stages")
            conn.commit()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        conn.close()


def add_sample_materials(db_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    sample_materials = [
        ("–ë—Ä—É—Å 100x100", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 150.0, "–º"),
        ("–î–æ—Å–∫–∞ 50x150", "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª", 120.0, "–º"),
        ("–ú–µ—Ç–∏–∑ –ú8", "–ú–µ—Ç–∏–∑", 5.0, "—à—Ç"),
        ("–ú–µ—Ç–∏–∑ –ú10", "–ú–µ—Ç–∏–∑", 7.5, "—à—Ç"),
        ("–ú–µ—Ç–∏–∑ –ú12", "–ú–µ—Ç–∏–∑", 10.0, "—à—Ç"),
        ("–¢—Ä–æ—Å –ú8", "–ú–µ—Ç–∏–∑", 45.0, "—à—Ç"),
        ("–¢—Ä–æ—Å –ú10", "–ú–µ—Ç–∏–∑", 65.0, "—à—Ç"),
        ("–¢—Ä–æ—Å –ú12", "–ú–µ—Ç–∏–∑", 85.0, "—à—Ç"),
        ("–ó–∞–∂–∏–º –ú8", "–ú–µ—Ç–∏–∑", 15.0, "—à—Ç"),
        ("–ó–∞–∂–∏–º –ú10", "–ú–µ—Ç–∏–∑", 20.0, "—à—Ç"),
        ("–ó–∞–∂–∏–º –ú12", "–ú–µ—Ç–∏–∑", 25.0, "—à—Ç"),
    ]

    try:
        for name, mtype, price, unit in sample_materials:
            cursor.execute("SELECT id FROM materials WHERE name = ?", (name,))
            if not cursor.fetchone():
                cursor.execute(
                    "INSERT INTO materials (name, type, price, unit) VALUES (?, ?, ?, ?)",
                    (name, mtype, price, unit)
                )
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {name}")

        conn.commit()
        print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        conn.rollback()
    finally:
        conn.close()


def setup_autofill_demo(db_path):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    create_database(db_path)
    add_stage_category_column(db_path)
    add_sample_materials(db_path)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º!")


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    test_db = "test_autofill.db"
    setup_autofill_demo(test_db)
    print(f"–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_db}")