import sys
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QTabWidget, QPushButton, QMessageBox
from PyQt5.QtCore import Qt
from widgets.materials_tab import MaterialsTab
from widgets.warehouse_tab import WarehouseTab
from widgets.products_tab import ProductsTab
from widgets.stages_tab import StagesTab
from widgets.orders_tab import OrdersTab


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""

    def __init__(self, db_path):
        super().__init__()
        self.db_path = db_path
        self.init_ui()
        self.show_startup_message()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setWindowTitle("–£—á–µ—Ç –¥–µ—Ä–µ–≤–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ —Ü–µ—Ö–∞ - –†–ï–§–ê–ö–¢–û–†–ò–ù–ì ‚úÖ")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1000, 700)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        self.tabs.currentChanged.connect(self.on_tab_changed)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        try:
            self.materials_tab = MaterialsTab(self.db_path, self)
            self.tabs.addTab(self.materials_tab, "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")

            self.warehouse_tab = WarehouseTab(self.db_path, self)
            self.tabs.addTab(self.warehouse_tab, "üè≠ –°–∫–ª–∞–¥")

            self.products_tab = ProductsTab(self.db_path, self)
            self.tabs.addTab(self.products_tab, "üîß –ò–∑–¥–µ–ª–∏—è")

            self.stages_tab = StagesTab(self.db_path, self)
            self.tabs.addTab(self.stages_tab, "‚ö° –≠—Ç–∞–ø—ã")

            self.orders_tab = OrdersTab(self.db_path, self)
            self.tabs.addTab(self.orders_tab, "üìã –ó–∞–∫–∞–∑—ã")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{str(e)}")
            sys.exit(1)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ")
        self.refresh_btn.clicked.connect(self.reload_all_tabs)
        self.refresh_btn.setFixedSize(120, 30)
        self.refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö")
        self.refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.refresh_btn.setParent(self)
        self.refresh_btn.raise_()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–æ! –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu('–§–∞–π–ª')

        # –î–µ–π—Å—Ç–≤–∏–µ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"
        about_action = file_menu.addAction('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ')
        about_action.triggered.connect(self.show_about)

        file_menu.addSeparator()

        # –î–µ–π—Å—Ç–≤–∏–µ "–í—ã—Ö–æ–¥"
        exit_action = file_menu.addAction('–í—ã—Ö–æ–¥')
        exit_action.triggered.connect(self.close)

        # –ú–µ–Ω—é "–î–∞–Ω–Ω—ã–µ"
        data_menu = menubar.addMenu('–î–∞–Ω–Ω—ã–µ')

        refresh_action = data_menu.addAction('–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ')
        refresh_action.triggered.connect(self.reload_all_tabs)

        data_menu.addSeparator()

        # –ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        recalc_products_action = data_menu.addAction('–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏–π')
        recalc_products_action.triggered.connect(self.recalculate_all_products)

        recalc_stages_action = data_menu.addAction('–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–∞–ø–æ–≤')
        recalc_stages_action.triggered.connect(self.recalculate_all_stages)

        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = menubar.addMenu('–ü–æ–º–æ—â—å')

        shortcuts_action = help_menu.addAction('–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏')
        shortcuts_action.triggered.connect(self.show_shortcuts)

    def show_startup_message(self):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        msg = QMessageBox(self)
        msg.setWindowTitle("–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        msg.setText("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–æ!")
        msg.setInformativeText(
            "–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:\n"
            "‚Ä¢ –ö–æ–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ 21 –º–æ–¥—É–ª—å\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä gui.py: 3000+ ‚Üí 200 —Å—Ç—Ä–æ–∫\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫\n"
            "‚Ä¢ –í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
            "–ú–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ!"
        )
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def show_about(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        <h2>–£—á–µ—Ç –¥–µ—Ä–µ–≤–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ —Ü–µ—Ö–∞</h2>
        <p><b>–í–µ—Ä—Å–∏—è:</b> 2.0 (–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥)</p>
        <p><b>–ö–æ–º–ø–∞–Ω–∏—è:</b> Space Concept</p>
        <p><b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–µ—Ä–µ–≤–æ—á–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤</p>

        <h3>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</h3>
        <ul>
        <li><b>Services:</b> –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏</li>
        <li><b>Widgets:</b> –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</li>
        <li><b>Utils:</b> –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã</li>
        </ul>

        <h3>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</h3>
        <ul>
        <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏</li>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏–π —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</li>
        <li>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç</li>
        <li>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞—Å–∫—Ä–æ—è</li>
        <li>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤</li>
        <li>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Git</li>
        </ul>

        <p><i>–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.</i></p>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        msg.setText(about_text)
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def show_shortcuts(self):
        """–ü–æ–∫–∞–∑ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        shortcuts_text = """
        <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</h3>
        <table>
        <tr><td><b>Ctrl + R</b></td><td>–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</td></tr>
        <tr><td><b>Ctrl + 1</b></td><td>–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∫–ª–∞–¥–∫–µ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"</td></tr>
        <tr><td><b>Ctrl + 2</b></td><td>–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∫–ª–∞–¥–∫–µ "–°–∫–ª–∞–¥"</td></tr>
        <tr><td><b>Ctrl + 3</b></td><td>–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∫–ª–∞–¥–∫–µ "–ò–∑–¥–µ–ª–∏—è"</td></tr>
        <tr><td><b>Ctrl + 4</b></td><td>–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∫–ª–∞–¥–∫–µ "–≠—Ç–∞–ø—ã"</td></tr>
        <tr><td><b>Ctrl + 5</b></td><td>–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∫–ª–∞–¥–∫–µ "–ó–∞–∫–∞–∑—ã"</td></tr>
        <tr><td><b>F5</b></td><td>–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É</td></tr>
        <tr><td><b>Ctrl + Q</b></td><td>–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</td></tr>
        </table>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        msg.setText(shortcuts_text)
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        try:
            tab_names = ["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–°–∫–ª–∞–¥", "–ò–∑–¥–µ–ª–∏—è", "–≠—Ç–∞–ø—ã", "–ó–∞–∫–∞–∑—ã"]
            if 0 <= index < len(tab_names):
                tab_name = tab_names[index]
                self.status_bar.showMessage(f"–ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {tab_name}", 2000)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                widget = self.tabs.widget(index)
                if hasattr(widget, 'load_data'):
                    widget.load_data()

        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {str(e)}", 5000)

    def reload_all_tabs(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö"""
        try:
            success_count = 0
            total_tabs = self.tabs.count()

            for i in range(total_tabs):
                widget = self.tabs.widget(i)
                if hasattr(widget, 'load_data'):
                    try:
                        widget.load_data()
                        success_count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ {i}: {str(e)}")

            if success_count == total_tabs:
                self.status_bar.showMessage("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", 3000)
            else:
                self.status_bar.showMessage(f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ {success_count} –∏–∑ {total_tabs} –≤–∫–ª–∞–¥–æ–∫", 3000)

        except Exception as e:
            self.status_bar.showMessage(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 5000)

    def recalculate_all_products(self):
        """–ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–∑–¥–µ–ª–∏–π"""
        try:
            if hasattr(self, 'products_tab'):
                self.products_tab.product_service.recalculate_all_products_cost()
                self.products_tab.load_data()
                self.status_bar.showMessage("‚úÖ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∏–∑–¥–µ–ª–∏–π –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞", 3000)
        except Exception as e:
            self.status_bar.showMessage(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏–∑–¥–µ–ª–∏–π: {str(e)}", 5000)

    def recalculate_all_stages(self):
        """–ü–µ—Ä–µ—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤"""
        try:
            if hasattr(self, 'stages_tab'):
                self.stages_tab.stage_service.recalculate_all_stages_cost()
                self.stages_tab.load_data()
                self.status_bar.showMessage("‚úÖ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞", 3000)
        except Exception as e:
            self.status_bar.showMessage(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —ç—Ç–∞–ø–æ–≤: {str(e)}", 5000)

    def resizeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        super().resizeEvent(event)
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        self.refresh_btn.move(self.width() - 130, 35)

    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        if event.modifiers() == Qt.ControlModifier:
            if event.key() == Qt.Key_1:
                self.tabs.setCurrentIndex(0)  # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
            elif event.key() == Qt.Key_2:
                self.tabs.setCurrentIndex(1)  # –°–∫–ª–∞–¥
            elif event.key() == Qt.Key_3:
                self.tabs.setCurrentIndex(2)  # –ò–∑–¥–µ–ª–∏—è
            elif event.key() == Qt.Key_4:
                self.tabs.setCurrentIndex(3)  # –≠—Ç–∞–ø—ã
            elif event.key() == Qt.Key_5:
                self.tabs.setCurrentIndex(4)  # –ó–∞–∫–∞–∑—ã
            elif event.key() == Qt.Key_R:
                self.reload_all_tabs()
            elif event.key() == Qt.Key_Q:
                self.close()

        elif event.key() == Qt.Key_F5:
            # –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
            current_widget = self.tabs.currentWidget()
            if hasattr(current_widget, 'load_data'):
                current_widget.load_data()
                self.status_bar.showMessage("üîÑ –¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", 2000)

        super().keyPressEvent(event)

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        reply = QMessageBox.question(
            self,
            '–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã?',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self.status_bar.showMessage("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            event.accept()
        else:
            event.ignore()

    def get_current_tab_name(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏"""
        current_index = self.tabs.currentIndex()
        return self.tabs.tabText(current_index)

    def switch_to_tab(self, tab_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        for i in range(self.tabs.count()):
            if tab_name.lower() in self.tabs.tabText(i).lower():
                self.tabs.setCurrentIndex(i)
                return True
        return False

    def get_tab_widget(self, tab_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤–∫–ª–∞–¥–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        tab_mapping = {
            'materials': self.materials_tab,
            'warehouse': self.warehouse_tab,
            'products': self.products_tab,
            'stages': self.stages_tab,
            'orders': self.orders_tab
        }
        return tab_mapping.get(tab_name.lower())


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if getattr(sys, 'frozen', False):
        # –î–ª—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        base_dir = os.path.dirname(sys.executable)
        db_path = os.path.join(base_dir, 'data', 'database.db')
    else:
        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        base_dir = os.path.dirname(os.path.abspath(__file__))
        db_path = os.path.join(base_dir, '..', 'data', 'database.db')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É
    db_path = os.path.abspath(db_path)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    data_dir = os.path.dirname(db_path)
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        window = MainWindow(db_path)
        window.show()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        sys.exit(app.exec_())

    except Exception as e:
        QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                             f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()